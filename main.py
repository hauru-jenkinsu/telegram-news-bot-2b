import feedparser
import telegram
import time
import json
import logging
import os
import re
import schedule
import asyncio
from urllib.parse import urljoin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'parser.log')
logging.basicConfig(
    filename=log_file,
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logging.getLogger().addHandler(logging.StreamHandler())

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
CHANNELS = os.getenv("CHANNELS", "").split(",")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

RSS_FEEDS = [
    {"name": "lenta.ru", "url": "https://lenta.ru/rss/news/", "fallback": "https://lenta.ru/rss/"},
    {"name": "vpk.name", "url": "https://vpk.name/rss/", "fallback": None},
    {"name": "ria.ru", "url": "https://ria.ru/export/rss2/index.xml", "fallback": "https://ria.ru/export/rss2/army/index.xml"},
	{"name": "rg.ru", "url": "https://rg.ru/xml/index.xml", "fallback": None},
	{"name": "tass.ru", "url": "https://tass.ru/rss/v2.xml?sections=MjQ%3D", "fallback": None}
	
]
KEYWORDS = [
    "—Å–≤–æ", "–≤—Å —Ä—Ñ", "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –≤–æ–π—Å–∫–∞", "—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —É—á–µ–Ω–∏—è", "—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∞—Ä–º–∏—è",
    "—Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ", "—Ä–æ—Å—Å–∏–π—Å–∫–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "—Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è", "–≤–æ–µ–Ω–Ω—ã–π",
    "–∞—Ä–º–∏—è", "—É—á–µ–Ω–∏—è", "–≤–æ–π—Å–∫–∞", "—Ç–µ—Ö–Ω–∏–∫–∞", "–æ–¥–∫–±", "–≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ",
    "—Ç–∞–Ω–∫", "—Ñ–ª–æ—Ç", "—Ä–∞–∫–µ—Ç–∞", "–æ–±–æ—Ä–æ–Ω–∞", "–º–∏–Ω–æ–±–æ—Ä–æ–Ω—ã", "–±–µ–ª–æ—É—Å–æ–≤",
    "–≤–æ–æ—Ä—É–∂—ë–Ω–Ω—ã–µ —Å–∏–ª—ã", "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "–Ω–∞—ë–º–Ω–∏–∫", "–≤—Å—É"
]
PROCESSED_LINKS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'processed_links.json')
REJECTED_NEWS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'rejected_news.json')
TEST_MODE = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = telegram.Bot(token=TOKEN)
    logging.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def load_processed_links():
    try:
        with open(PROCESSED_LINKS_FILE, "r", encoding='utf-8') as f:
            return set(json.load(f))
    except FileNotFoundError:
        logging.info(f"–§–∞–π–ª {PROCESSED_LINKS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
        return set()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
def save_processed_links(links):
    try:
        with open(PROCESSED_LINKS_FILE, "w", encoding='utf-8') as f:
            json.dump(list(links), f, ensure_ascii=False)
        logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫ –≤ {PROCESSED_LINKS_FILE}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
def save_rejected_news(title, link, reason):
    try:
        rejected = []
        if os.path.exists(REJECTED_NEWS_FILE):
            with open(REJECTED_NEWS_FILE, "r", encoding='utf-8') as f:
                rejected = json.load(f)
        rejected.append({"title": title, "link": link, "reason": reason, "time": time.strftime("%Y-%m-%d %H:%M:%S")})
        with open(REJECTED_NEWS_FILE, "w", encoding='utf-8') as f:
            json.dump(rejected, f, ensure_ascii=False, indent=2)
        logging.debug(f"–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {title}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: {e}")

# –ü–∞—Ä—Å–∏–Ω–≥ RSS
async def parse_rss(feed):
    try:
        feed_data = feedparser.parse(feed["url"])
        if not feed_data.entries and feed["fallback"]:
            logging.warning(f"–ü—É—Å—Ç–∞—è RSS-–ª–µ–Ω—Ç–∞: {feed['url']}, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π URL: {feed['fallback']}")
            feed_data = feedparser.parse(feed["fallback"])
        if not feed_data.entries:
            logging.warning(f"–ü—É—Å—Ç–∞—è RSS-–ª–µ–Ω—Ç–∞: {feed['name']} ({feed['url']})")
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–ü—É—Å—Ç–∞—è RSS-–ª–µ–Ω—Ç–∞: {feed['name']} ({feed['url']})")
            return []
        news = []
        for entry in feed_data.entries[:5]:
            title = entry.get("title", "").strip()
            link = entry.get("link", "").strip()
            desc = entry.get("summary", entry.get("description", "")).strip()
            if title and link:
                news.append({"title": title, "link": link, "desc": desc})
            else:
                logging.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ {feed['url']}: title={title}, link={link}")
        logging.info(f"–°–ø–∞—Ä—Å–µ–Ω–æ {feed['name']} ({feed['url']}): –Ω–∞–π–¥–µ–Ω–æ {len(news)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        return news
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS {feed['name']} ({feed['url']}): {e}")
        await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS {feed['name']}: {e}")
        return []

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏
async def publish_news(title, link):
    message = f"üì∞ {title}\nüîó {link}"
    if TEST_MODE:
        logging.info(f"[–¢–ï–°–¢] –ù–æ–≤–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: {message}")
        print(f"[–¢–ï–°–¢] {message}")
        return True
    success = True
    for channel in CHANNELS:
        try:
            await bot.send_message(chat_id=channel, text=message)
            logging.info(f"–ù–æ–≤–æ—Å—Ç—å '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ {channel}")
            time.sleep(0.5)
        except telegram.error.RetryAfter as e:
            logging.warning(f"–õ–∏–º–∏—Ç Telegram, –∑–∞–¥–µ—Ä–∂–∫–∞ {e.retry_after} —Å–µ–∫")
            time.sleep(e.retry_after)
            await bot.send_message(chat_id=channel, text=message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {channel}: {e}")
            await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {channel}: {e}")
            success = False
    return success

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
def matches_keywords(text):
    text = text.lower()
    for keyword in KEYWORDS:
        if re.search(r'\b' + re.escape(keyword.lower()) + r'\b', text):
            logging.debug(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{keyword}' –≤ '{text}'")
            return True
    return False

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –≤ {time.strftime('%Y-%m-%d %H:%M:%S')}")
    processed_links = load_processed_links()
    for feed in RSS_FEEDS:
        news = await parse_rss(feed)
        for item in news:
            title = item["title"]
            desc = item["desc"]
            link = item["link"]
            if link in processed_links:
                save_rejected_news(title, link, "–¥—É–±–ª–∏–∫–∞—Ç")
                logging.debug(f"–ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç): {title}")
                continue
            if matches_keywords(title) or matches_keywords(desc):
                if await publish_news(title, link):
                    processed_links.add(link)
                else:
                    save_rejected_news(title, link, "–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            else:
                save_rejected_news(title, link, "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
                logging.debug(f"–ù–æ–≤–æ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤): {title}")
        save_processed_links(processed_links)
    logging.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
def run_scheduler():
    schedule.every(1).hours.do(lambda: asyncio.run(main()))
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–π —á–∞—Å")
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Ç–µ—Å—Ç–∞
    #run_scheduler()  # –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
